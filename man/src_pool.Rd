% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DBI.R
\name{src_pool}
\alias{con_acquire.src_pool}
\alias{con_release.src_pool}
\alias{src_pool}
\title{Wrap DBI Database Connection Pool for dplyr use.}
\usage{
src_pool(pool)

con_acquire.src_pool(src)

con_release.src_pool(src, con)
}
\arguments{
\item{pool}{A pool object}

\item{src, con}{Internals: should not be used directly}
}
\description{
This functions opens a \code{dplyr}-compatible connection. If you're
used to using \code{dplyr} to query databases, then you're familiar
with the \code{src_*} functions (e.g. \code{\link[dplyr]{src_mysql}}).
In those functions, you typically have to specify the \code{drv} and
all the authorization arguments required to connect to the database.
If you're using \code{pool}, however, you've already did all of this
when you created the Pool object with \code{dbPool}. So for
\code{src_pool}, you only need to pass in that same Pool object. Then,
you can use the resulting object just like in \code{dplyr} (see the
examples below).
}
\section{Comparison to \code{dplyr} code}{

First, let's show how you'd connect and query a MySQL database
using only \code{dplyr}:

\preformatted{
my_db <- src_mysql(
  dbname = "shinydemo",
  host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
  user = "guest",
  password = "guest"
)
# get the first 5 rows:
my_db \%>\% tbl("City") \%>\% head(5)
}

Now, let's do the same thing using a Pool object:

\preformatted{pool <- dbPool(
  drv = RMySQL::MySQL(),
  dbname = "shinydemo",
  host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
  username = "guest",
  password = "guest"
)
# get the first 5 rows:
src_pool(pool) \%>\% tbl("City") \%>\% head(5)
}
}

\section{Performance}{

What's the advantage of using \code{pool} with \code{dplyr}, rather
than just using \code{dplyr} to query a database? As usual with
\code{pool}, the answer is performance (less emphasis on connection
management this time since \code{dplyr} already did a good job on
that). However, this only applies for some situations. Basically,
when you use any of the \code{src_*} functions (\code{src_pool}
included), you are creating connections that will only be closed
on garbage collection. If you are querying a database a lot and
using \code{src_*} each time, you are always fetching and closing
connections. The difference is that, without \code{pool}, you're
always fetching connections from the database itself (potentially
pretty computationally expensive) and closing them for good. But
with \code{pool}, you're just fetching and returning connections
to and from the pool, which is essentially free.

(You might not need to use get a new connection with
\code{src_*} for each query, but if you have a potentially unbounded
number of users, as in a hosted Shiny app, you certainly should --
or you'll risk runnign out of connections. See
\href{http://rstudio.com}{this article} to learn more about
using \code{dplyr} together with \code{pool} in a Shiny app.)
}
\examples{
\dontrun{
pool <- dbPool(
  drv = RMySQL::MySQL(),
  dbname = "shinydemo",
  host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
  username = "guest",
  password = "guest"
)

# equivalent to: dbGetQuery(pool, "SELECT * from City LIMIT 5;")
src_pool(pool) \%>\% tbl("City") \%>\% head(5)
#>   ID           Name CountryCode      District Population
#> 1  1          Kabul         AFG         Kabol    1780000
#> 2  2       Qandahar         AFG      Qandahar     237500
#> 3  3          Herat         AFG         Herat     186800
#> 4  4 Mazar-e-Sharif         AFG         Balkh     127800
#> 5  5      Amsterdam         NLD Noord-Holland     731200

poolClose(pool)
}
}

