% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbplyr.R
\name{dbplyr-methods}
\alias{dbplyr-methods}
\alias{db_analyze.Pool}
\alias{db_begin.Pool}
\alias{db_collect.Pool}
\alias{db_commit.Pool}
\alias{db_compute.Pool}
\alias{db_copy_to.Pool}
\alias{db_create_index.Pool}
\alias{db_create_indexes.Pool}
\alias{db_create_table.Pool}
\alias{db_data_type.Pool}
\alias{db_desc.Pool}
\alias{db_drop_table.Pool}
\alias{db_explain.Pool}
\alias{db_has_table.Pool}
\alias{db_insert_into.Pool}
\alias{db_list_tables.Pool}
\alias{db_query_fields.Pool}
\alias{db_query_rows.Pool}
\alias{db_rollback.Pool}
\alias{db_save_query.Pool}
\alias{db_sql_render.Pool}
\alias{db_write_table.Pool}
\alias{sql_escape_ident.Pool}
\alias{sql_escape_logical.Pool}
\alias{sql_escape_string.Pool}
\alias{sql_join.Pool}
\alias{sql_select}
\alias{sql_semi_join.Pool}
\alias{sql_subquery.Pool}
\alias{sql_translate_env.Pool}
\title{DBIConnection methods from dbplyr.}
\usage{
\method{db_analyze}{Pool}(con, table, ...)

\method{db_begin}{Pool}(con, ...)

\method{db_collect}{Pool}(con, sql, n = -1, warn_incomplete = TRUE, ...)

\method{db_commit}{Pool}(con, ...)

\method{db_compute}{Pool}(con, table, sql, temporary = TRUE,
  unique_indexes = list(), indexes = list(), ...)

\method{db_copy_to}{Pool}(con, table, values, overwrite = FALSE,
  types = NULL, temporary = TRUE, unique_indexes = NULL, indexes = NULL,
  analyze = TRUE, ...)

\method{db_create_index}{Pool}(con, table, columns, name = NULL,
  unique = FALSE, ...)

\method{db_create_indexes}{Pool}(con, table, indexes = NULL, unique = FALSE,
  ...)

\method{db_create_table}{Pool}(con, table, types, temporary = FALSE, ...)

\method{db_data_type}{Pool}(con, fields)

\method{db_desc}{Pool}(x)

\method{db_drop_table}{Pool}(con, table, force = FALSE, ...)

\method{db_explain}{Pool}(con, sql, ...)

\method{db_has_table}{Pool}(con, table)

\method{db_insert_into}{Pool}(con, table, values, ...)

\method{db_list_tables}{Pool}(con)

\method{db_query_fields}{Pool}(con, sql, ...)

\method{db_query_rows}{Pool}(con, sql, ...)

\method{db_rollback}{Pool}(con, ...)

\method{db_save_query}{Pool}(con, sql, name, temporary = TRUE, ...)

\method{db_sql_render}{Pool}(con, sql, ...)

\method{db_write_table}{Pool}(con, table, types, values, temporary = FALSE,
  ...)

\method{sql_escape_ident}{Pool}(con, x)

\method{sql_escape_logical}{Pool}(con, x)

\method{sql_escape_string}{Pool}(con, x)

\method{sql_join}{Pool}(con, x, y, vars, type = "inner", by = NULL, ...)

sql_select(con, select, from, where = NULL, group_by = NULL,
  having = NULL, order_by = NULL, limit = NULL, distinct = FALSE, ...)

\method{sql_semi_join}{Pool}(con, x, y, anti = FALSE, by = NULL, ...)

\method{sql_subquery}{Pool}(con, from, name = random_table_name(), ...)

\method{sql_translate_env}{Pool}(con)
}
\description{
Pool object wrappers around \code{\link[dbplyr]{dbplyr}}'s
DBIConnection methods. For the original documentation, see:
\code{\link[dplyr]{backend_dbplyr}}.
}
